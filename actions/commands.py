from aiogram import Router, types
from aiogram.filters import CommandStart
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from keyboards import Buttons, lets_go_keyboard, start_keyboard, user_exists_keyboard
from .state_machine import SetPlan
from dal import DAL
from dependency_injection import container
from .state_machine import Beginning

command_router = Router()


@command_router.message(CommandStart())
async def handle_start(message: types.Message, state: FSMContext):
    await message.answer(text='üëã')
    dal_object = DAL(container.get('db_session'))
    if dal_object.check_user_exists(username=message.from_user.username):
        await state.set_state(Beginning.exists)
        await message.answer(
            text='–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ?',
            reply_markup=user_exists_keyboard()
        )
    else:
        dal_object.write_user(username=message.from_user.username,
                            chat_id=message.chat.id)
        await message.answer(
            text=f"Hello {message.from_user.full_name}! You're in bb_bot. Here you can... Enjoy and have fun!",
            reply_markup=start_keyboard()
        )


@command_router.message(Command('help'))
async def handle_help(message: types.Message):
    await message.answer(
        chat_id=message.chat.id,
        text='Hi! I\'m just a bot.\nSend me any message.'
    )


@command_router.message(lambda message: message.text == Buttons.calculate_button)
@command_router.message(Command('calculate'))
async def handle_calculate(message: types.Message):
    await message.answer(
        text='–î–∞–≤–∞–π —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–≤–æ–µ–π —Ü–µ–ª–∏!',
        reply_markup=lets_go_keyboard()
    )


@command_router.message(lambda message: message.text == Buttons.set_plan_button)
@command_router.message(Command('set_plan'))
async def handle_set_plan(message: types.Message, state: FSMContext):
    await state.set_state(SetPlan.calories)
    await message.answer(
        text='–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —Å–∞–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Ç–æ —Å–æ–æ–±—â–∏ –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ–±—ã —è –º–æ–≥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å!'
    )
    await message.answer(
        text='–°–∫–æ–ª—å–∫–æ –∫–∞–ª–ª–æ—Ä–∏–π –≤ –¥–µ–Ω—å —Ç—ã —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –µ–¥—ã?'
    )


